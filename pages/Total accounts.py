import streamlit as st
import pandas as pd
import os
import sys

# Adicionar diret√≥rio pai ao path para importar auth_simple
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from auth_simple import (verificar_autenticacao, exibir_header_usuario,
                  verificar_status_aprovado, is_modo_cloud, get_modo_operacao)

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Total Accounts - Dashboard KE5Z",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="auto"
)

# Verificar autentica√ß√£o - OBRIGAT√ìRIO no in√≠cio de cada p√°gina
verificar_autenticacao()

# Verificar se o usu√°rio est√° aprovado
if ('usuario_nome' in st.session_state and 
    not verificar_status_aprovado(st.session_state.usuario_nome)):
    st.warning("‚è≥ Sua conta ainda est√° pendente de aprova√ß√£o. "
               "Aguarde o administrador aprovar seu acesso.")
    st.info("üìß Voc√™ receber√° uma notifica√ß√£o quando sua conta for "
            "aprovada.")
    st.stop()

# Header com informa√ß√µes do usu√°rio
col1, col2, col3 = st.columns([2, 1, 1])
with col1:
    st.title("üìä Total Accounts - Centro de Lucro 02S")
    st.subheader("Somat√≥rio de todas as contas do centro de lucro 02S, "
                 "exceto as contas D_B")

# Exibir header do usu√°rio
exibir_header_usuario()

st.markdown("---")

# Conte√∫do da nova p√°gina
st.write("Esta p√°gina cont√©m o somat√≥rio de todas as contas do centro de "
         "lucro 02S, exceto as contas D_B!")

# Usar modo selecionado no login (substitui detec√ß√£o autom√°tica)
is_cloud = is_modo_cloud()

# Informar sobre modo selecionado
modo_atual = get_modo_operacao()
if modo_atual == 'cloud':
    st.sidebar.info("‚òÅÔ∏è **Modo Cloud (Otimizado)**\n"
                     "Dados otimizados para melhor performance.")
else:
    st.sidebar.success("üíª **Modo Completo**\n"
                       "Acesso a todos os conjuntos de dados.")

# Interface para sele√ß√£o de dados
st.sidebar.markdown("---")
st.sidebar.subheader("üóÇÔ∏è Sele√ß√£o de Dados")

# Verificar quais arquivos est√£o dispon√≠veis
arquivos_status = {}
for tipo, nome in [("completo", "KE5Z.parquet"), ("main", "KE5Z_main.parquet"), ("others", "KE5Z_others.parquet")]:
    caminho = os.path.join("KE5Z", nome)
    arquivos_status[tipo] = os.path.exists(caminho)

# Op√ß√µes dispon√≠veis baseadas nos arquivos existentes
opcoes_dados = []
if arquivos_status.get("main", False):
    opcoes_dados.append(("üìä Dados Principais (sem Others)", "main"))
if arquivos_status.get("others", False):
    opcoes_dados.append(("üìã Apenas Others", "others"))

# No Streamlit Cloud, N√ÉO mostrar dados completos para evitar sobrecarga
if not is_cloud and arquivos_status.get("completo", False):
    opcoes_dados.append(("üìÅ Dados Completos", "completo"))

# Se n√£o h√° arquivos separados, usar apenas completo (modo local)
if not opcoes_dados:
    if is_cloud:
        st.error("‚ùå **Erro no Streamlit Cloud**: Arquivos otimizados n√£o encontrados!")
        st.error("Execute a extra√ß√£o localmente para gerar `KE5Z_main.parquet` e `KE5Z_others.parquet`")
        st.stop()
    else:
        opcoes_dados = [("üìÅ Dados Completos", "completo")]

# Widget de sele√ß√£o com prioridade para dados principais
def get_default_index():
    """Retorna o √≠ndice padr√£o priorizando dados principais"""
    opcoes_values = [op[1] for op in opcoes_dados]
    
    # Prioridade: main > main_filtered > others > completo
    if "main" in opcoes_values:
        return opcoes_values.index("main")
    elif "main_filtered" in opcoes_values:
        return opcoes_values.index("main_filtered")
    elif "others" in opcoes_values:
        return opcoes_values.index("others")
    else:
        return 0  # Primeiro dispon√≠vel

opcao_selecionada = st.sidebar.selectbox(
    "Escolha o conjunto de dados:",
    options=[op[1] for op in opcoes_dados],
    format_func=lambda x: next(op[0] for op in opcoes_dados if op[1] == x),
    index=get_default_index()  # Priorizar dados principais
)

# Mostrar informa√ß√µes sobre a sele√ß√£o
if opcao_selecionada == "main":
    info_msg = "üéØ **Dados Otimizados**\nCarregando apenas dados principais (USI ‚â† 'Others')\nMelhor performance para an√°lises gerais."
    if is_cloud:
        info_msg += "\n\n‚òÅÔ∏è **Modo Cloud**: Arquivo otimizado para melhor performance."
    st.sidebar.info(info_msg)
elif opcao_selecionada == "others":
    info_msg = "üîç **Dados Others**\nCarregando apenas registros USI = 'Others'\nPara an√°lise espec√≠fica de Others."
    if is_cloud:
        info_msg += "\n\n‚òÅÔ∏è **Modo Cloud**: Arquivo otimizado para melhor performance."
    st.sidebar.info(info_msg)
else:
    st.sidebar.info("üìä **Dados Completos**\n"
                   "Todos os registros incluindo Others\n"
                   "üíª **Dispon√≠vel apenas no modo local**")

# Mostrar aviso sobre otimiza√ß√£o no cloud
if is_cloud:
    st.sidebar.success("‚ö° **Otimiza√ß√£o Ativa**\n"
                      "Usando arquivos separados para melhor performance no Cloud!")

@st.cache_data(ttl=3600, max_entries=3, persist="disk", show_spinner=True)
def load_data_optimized(arquivo_tipo="completo"):
    """Carrega dados com otimiza√ß√£o inteligente de mem√≥ria - WATERFALL OTIMIZADO"""
    
    # PRIORIDADE 1: Tentar arquivo waterfall otimizado (68% menor + N¬∫ conta!)
    arquivo_waterfall = os.path.join("KE5Z", "KE5Z_waterfall.parquet")
    if os.path.exists(arquivo_waterfall):
        try:
            df = pd.read_parquet(arquivo_waterfall)
            # Aplicar filtro se necess√°rio baseado no tipo solicitado
            if arquivo_tipo == "main" and 'USI' in df.columns:
                df = df[df['USI'] != 'Others'].copy()
            elif arquivo_tipo == "others" and 'USI' in df.columns:
                df = df[df['USI'] == 'Others'].copy()
            # arquivo_tipo "completo" usa todos os dados do waterfall
            
            st.sidebar.success("‚ö° **WATERFALL OTIMIZADO**\nUsando arquivo 68% menor + N¬∫ conta!")
            return df
        except Exception as e:
            st.sidebar.warning(f"‚ö†Ô∏è Erro no arquivo waterfall: {str(e)}")
    
    # FALLBACK: Usar arquivos originais se waterfall n√£o estiver dispon√≠vel
    arquivos_disponiveis = {
        "completo": "KE5Z.parquet",
        "main": "KE5Z_main.parquet", 
        "others": "KE5Z_others.parquet"
    }
    
    nome_arquivo = arquivos_disponiveis.get(arquivo_tipo, "KE5Z.parquet")
    arquivo_parquet = os.path.join("KE5Z", nome_arquivo)
    
    try:
        if not os.path.exists(arquivo_parquet):
            # Se arquivo espec√≠fico n√£o existe, tentar arquivo completo
            if arquivo_tipo != "completo":
                st.warning(f"‚ö†Ô∏è Arquivo {nome_arquivo} n√£o encontrado, carregando dados completos...")
                return load_data_optimized("completo")
            raise FileNotFoundError(f"Arquivo n√£o encontrado: {arquivo_parquet}")
        
        df = pd.read_parquet(arquivo_parquet)
        
        # Otimiza√ß√£o de mem√≥ria (sem alterar valores)
        try:
            for col in df.columns:
                if df[col].dtype == 'object':
                    # Converter para category quando adequado
                    unique_ratio = (df[col].nunique(dropna=True) / max(1, len(df)))
                    if unique_ratio < 0.5:
                        df[col] = df[col].astype('category')
            for col in df.select_dtypes(include=['float64']).columns:
                df[col] = pd.to_numeric(df[col], downcast='float')
            for col in df.select_dtypes(include=['int64']).columns:
                df[col] = pd.to_numeric(df[col], downcast='integer')
        except Exception:
            pass
        return df
        
    except Exception as e:
        st.error(f"‚ùå Erro ao carregar dados: {str(e)}")
        st.stop()

# Ler o arquivo parquet com otimiza√ß√£o
try:
    df_principal = load_data_optimized(opcao_selecionada)
    st.sidebar.success("‚úÖ Dados carregados com sucesso")
    if not is_cloud:
        st.sidebar.info(f"üìä {len(df_principal)} registros carregados")
except Exception as e:
    st.error(f"‚ùå Erro ao carregar dados: {str(e)}")
    st.stop()

# Filtros para o DataFrame (padronizados com p√°gina principal)
st.sidebar.title("Filtros")

# Filtro 1: USINA
usina_opcoes = ["Todos"] + sorted(df_principal['USI'].dropna().astype(str).unique().tolist()) if 'USI' in df_principal.columns else ["Todos"]
default_usina = ["Ve√≠culos"] if "Ve√≠culos" in usina_opcoes else ["Todos"]
usina_selecionada = st.sidebar.multiselect("Selecione a USINA:", usina_opcoes, default=default_usina)

# Filtrar o DataFrame com base na USI
if "Todos" in usina_selecionada or not usina_selecionada:
    df_filtrado = df_principal.copy()
else:
    df_filtrado = df_principal[df_principal['USI'].astype(str).isin(usina_selecionada)]

# Filtro 2: Per√≠odo
periodo_opcoes = ["Todos"] + sorted(df_filtrado['Per√≠odo'].dropna().astype(str).unique().tolist()) if 'Per√≠odo' in df_filtrado.columns else ["Todos"]
periodo_selecionado = st.sidebar.selectbox("Selecione o Per√≠odo:", periodo_opcoes)
if periodo_selecionado != "Todos":
    df_filtrado = df_filtrado[df_filtrado['Per√≠odo'].astype(str) == str(periodo_selecionado)]

# Filtro 3: Centro cst
if 'Centro cst' in df_filtrado.columns:
    centro_cst_opcoes = ["Todos"] + sorted(df_filtrado['Centro cst'].dropna().astype(str).unique().tolist())
    centro_cst_selecionado = st.sidebar.selectbox("Selecione o Centro cst:", centro_cst_opcoes)
    if centro_cst_selecionado != "Todos":
        df_filtrado = df_filtrado[df_filtrado['Centro cst'].astype(str) == str(centro_cst_selecionado)]

# Filtro 4: Conta cont√°bil
if 'N¬∫ conta' in df_filtrado.columns:
    conta_contabil_opcoes = sorted(df_filtrado['N¬∫ conta'].dropna().astype(str).unique().tolist())
    conta_contabil_selecionadas = st.sidebar.multiselect("Selecione a Conta cont√°bil:", conta_contabil_opcoes)
    if conta_contabil_selecionadas:
        df_filtrado = df_filtrado[df_filtrado['N¬∫ conta'].astype(str).isin(conta_contabil_selecionadas)]

# Cache para op√ß√µes de filtros (otimiza√ß√£o de performance)
@st.cache_data(ttl=1800, max_entries=3)
def get_filter_options(df, column_name):
    """Obt√©m op√ß√µes de filtro com cache para melhor performance"""
    if column_name in df.columns:
        return ["Todos"] + sorted(df[column_name].dropna().astype(str).unique().tolist())
    return ["Todos"]

# Filtros principais (com cache otimizado)
filtros_principais = [
    ("Type 05", "Type 05", "multiselect"),
    ("Type 06", "Type 06", "multiselect"), 
    ("Type 07", "Type 07", "multiselect"),
    ("Fornecedor", "Fornecedor", "multiselect"),
    ("Fornec.", "Fornec.", "multiselect"),
    ("Tipo", "Tipo", "multiselect")
]

for col_name, label, widget_type in filtros_principais:
    if col_name in df_filtrado.columns:
        opcoes = get_filter_options(df_filtrado, col_name)
        if widget_type == "multiselect":
            selecionadas = st.sidebar.multiselect(f"Selecione o {label}:", opcoes, default=["Todos"])
            if selecionadas and "Todos" not in selecionadas:
                df_filtrado = df_filtrado[df_filtrado[col_name].astype(str).isin(selecionadas)]

# Filtros avan√ßados (expans√≠vel)
with st.sidebar.expander("üîç Filtros Avan√ßados"):
    filtros_avancados = [
        ("N¬∫ conta", "Conta Cont√°bil", "multiselect"),
        ("Centro cst", "Centro de Custo", "multiselect"),
        ("Oficina", "Oficina", "multiselect"),
        ("Usu√°rio", "Usu√°rio", "multiselect"),
        ("Denomina√ß√£o", "Denomina√ß√£o", "multiselect"),
        ("Dt.l√ßto.", "Data Lan√ßamento", "multiselect")
    ]
    
    for col_name, label, widget_type in filtros_avancados:
        if col_name in df_filtrado.columns:
            opcoes = get_filter_options(df_filtrado, col_name)
            # Limitar op√ß√µes para melhor performance
            if len(opcoes) > 101:  # 100 + "Todos"
                opcoes = opcoes[:101]
                st.caption(f"‚ö†Ô∏è {label}: Limitado a 100 op√ß√µes para performance")
            
            if widget_type == "multiselect":
                selecionadas = st.multiselect(f"Selecione o {label}:", opcoes, default=["Todos"])
                if selecionadas and "Todos" not in selecionadas:
                    df_filtrado = df_filtrado[df_filtrado[col_name].astype(str).isin(selecionadas)]

##################################################################################################

# T√≠tulo da nova p√°gina
st.title("Total SAP KE5Z - Todas as USINAS")

# Verificar se a coluna USI existe
if 'USI' not in df_filtrado.columns:
    st.error("‚ùå **Coluna 'USI' n√£o encontrada nos dados!**")
    st.warning("‚ö†Ô∏è **Poss√≠veis causas:**")
    st.write("1. Os dados n√£o foram extra√≠dos corretamente")
    st.write("2. O merge com dados SAPIENS n√£o foi realizado")
    st.write("3. O arquivo KE5Z.parquet precisa ser regenerado")
    
    st.info("üí° **Solu√ß√µes:**")
    st.write("- Execute a **Extra√ß√£o de Dados** na p√°gina correspondente")
    st.write("- Certifique-se de que o arquivo 'Dados SAPIENS.xlsx' existe")
    st.write("- Verifique se os merges est√£o funcionando corretamente")
    
    st.subheader("üìã Colunas dispon√≠veis nos dados:")
    colunas_disponiveis = sorted(df_filtrado.columns.tolist())
    for i, col in enumerate(colunas_disponiveis, 1):
        st.write(f"{i}. {col}")
    
    st.stop()

# Criar uma tabela din√¢mica (pivot table) para somar os valores por 'USI', incluindo campos desta coluna vazio ou NAN, a coluna por 'Per√≠odo' e uma linha total
tabela_somada = df_filtrado.pivot_table(index='USI', columns='Per√≠odo', values='Valor', aggfunc='sum', fill_value=0, margins=True, margins_name='Total')
# Exibir a tabela somada na p√°gina com os numeros formatados como moeda brasileira
tabela_somada = tabela_somada.style.format("R$ {:,.2f}", decimal=",",thousands=".")
st.dataframe(tabela_somada)


##################################################################################################
# T√≠tulo da nova p√°gina
st.title("Total SAP KE5Z - Todas as contas")
# Criar uma tabela din√¢mica (pivot table) para somar os valores por 'N¬∫ conta' incluindo a coluna por 'Per√≠odo'
tabela_somada = df_filtrado.pivot_table(index='N¬∫ conta', columns='Per√≠odo', values='Valor', aggfunc='sum', fill_value=0, margins=True, margins_name='Total')

# Exibir a tabela somada na p√°gina com os numeros formatados como moeda brasileira
tabela_somada = tabela_somada.style.format("R$ {:,.2f}", decimal=",",thousands=".")
st.dataframe(tabela_somada)

# ============= GR√ÅFICOS M√äS A M√äS (MESMO PADR√ÉO DO DASH PRINCIPAL) =============
st.markdown("---")
st.subheader("üìä An√°lise Gr√°fica M√™s a M√™s")

# Gr√°fico principal por Per√≠odo (mesmo padr√£o do Dash.py)
@st.cache_data(ttl=900, max_entries=2)
def create_period_chart_total_accounts(df_data):
    """Cria gr√°fico de per√≠odo otimizado - MESMO PADR√ÉO DO DASH PRINCIPAL"""
    try:
        chart_data = df_data.groupby('Per√≠odo')['Valor'].sum().reset_index()
        
        import altair as alt
        grafico_barras = alt.Chart(chart_data).mark_bar().encode(
            x=alt.X('Per√≠odo:N', title='Per√≠odo'),
            y=alt.Y('Valor:Q', title='Soma do Valor'),
            color=alt.Color('Valor:Q', title='Valor', scale=alt.Scale(scheme='redyellowgreen', reverse=True)),
            tooltip=['Per√≠odo:N', 'Valor:Q']
        ).properties(
            title='Total Accounts - Soma do Valor por Per√≠odo',
            height=400
        )
        
        return grafico_barras
    except Exception as e:
        st.error(f"Erro ao criar gr√°fico de per√≠odo: {e}")
        return None

# Gr√°fico por Type 05 (mesmo padr√£o do Dash.py)
@st.cache_data(ttl=900, max_entries=2)
def create_type05_chart_total_accounts(df_data):
    """Cria gr√°fico Type 05 otimizado - MESMO PADR√ÉO DO DASH PRINCIPAL"""
    try:
        type05_data = df_data.groupby('Type 05')['Valor'].sum().reset_index()
        type05_data = type05_data.sort_values('Valor', ascending=False)
        
        import altair as alt
        chart = alt.Chart(type05_data).mark_bar().encode(
            x=alt.X('Type 05:N', title='Type 05', sort='-y'),
            y=alt.Y('Valor:Q', title='Soma do Valor'),
            color=alt.Color('Valor:Q', title='Valor', scale=alt.Scale(scheme='redyellowgreen', reverse=True)),
            tooltip=['Type 05:N', 'Valor:Q']
        ).properties(
            title='Total Accounts - Soma do Valor por Type 05',
            height=400
        )
        
        return chart
    except Exception as e:
        st.error(f"Erro no gr√°fico Type 05: {e}")
        return None

# Gr√°fico por Type 06 (mesmo padr√£o do Dash.py)
@st.cache_data(ttl=900, max_entries=2)
def create_type06_chart_total_accounts(df_data):
    """Cria gr√°fico Type 06 otimizado - MESMO PADR√ÉO DO DASH PRINCIPAL"""
    try:
        type06_data = df_data.groupby('Type 06')['Valor'].sum().reset_index()
        type06_data = type06_data.sort_values('Valor', ascending=False)
        
        import altair as alt
        chart = alt.Chart(type06_data).mark_bar().encode(
            x=alt.X('Type 06:N', title='Type 06', sort='-y'),
            y=alt.Y('Valor:Q', title='Soma do Valor'),
            color=alt.Color('Valor:Q', title='Valor', scale=alt.Scale(scheme='redyellowgreen', reverse=True)),
            tooltip=['Type 06:N', 'Valor:Q']
        ).properties(
            title='Total Accounts - Soma do Valor por Type 06',
            height=400
        )
        
        return chart
    except Exception as e:
        st.error(f"Erro no gr√°fico Type 06: {e}")
        return None

# Exibir gr√°ficos em colunas
col1, col2 = st.columns(2)

with col1:
    # Gr√°fico principal por per√≠odo
    grafico_periodo = create_period_chart_total_accounts(df_filtrado)
    if grafico_periodo:
        # Adicionar r√≥tulos com valores nas barras
        import altair as alt
        rotulos = grafico_periodo.mark_text(
            align='center',
            baseline='middle',
            dy=-10,
            color='black',
            fontSize=12
        ).encode(
            text=alt.Text('Valor:Q', format=',.2f')
        )
        
        grafico_completo = grafico_periodo + rotulos
        st.altair_chart(grafico_completo, use_container_width=True)

with col2:
    # Gr√°fico por Type 05
    if 'Type 05' in df_filtrado.columns:
        chart_type05 = create_type05_chart_total_accounts(df_filtrado)
        if chart_type05:
            st.altair_chart(chart_type05, use_container_width=True)

# Segunda linha de gr√°ficos
col3, col4 = st.columns(2)

with col3:
    # Gr√°fico por Type 06
    if 'Type 06' in df_filtrado.columns:
        chart_type06 = create_type06_chart_total_accounts(df_filtrado)
        if chart_type06:
            st.altair_chart(chart_type06, use_container_width=True)

with col4:
    # Gr√°fico por USI (adicional)
    if 'USI' in df_filtrado.columns:
        @st.cache_data(ttl=900, max_entries=2)
        def create_usi_chart_total_accounts(df_data):
            """Cria gr√°fico USI otimizado"""
            try:
                usi_data = df_data.groupby('USI')['Valor'].sum().reset_index()
                usi_data = usi_data.sort_values('Valor', ascending=False)
                
                import altair as alt
                chart = alt.Chart(usi_data).mark_bar().encode(
                    x=alt.X('USI:N', title='USI', sort='-y'),
                    y=alt.Y('Valor:Q', title='Soma do Valor'),
                    color=alt.Color('Valor:Q', title='Valor', scale=alt.Scale(scheme='redyellowgreen', reverse=True)),
                    tooltip=['USI:N', 'Valor:Q']
                ).properties(
                    title='Total Accounts - Soma do Valor por USI',
                    height=400
                )
                
                return chart
            except Exception as e:
                st.error(f"Erro no gr√°fico USI: {e}")
                return None
        
        chart_usi = create_usi_chart_total_accounts(df_filtrado)
        if chart_usi:
            st.altair_chart(chart_usi, use_container_width=True)

st.markdown("---")

# Fun√ß√£o para exportar uma √∫nica tabela para Excel
def exportar_excel(df, nome_arquivo):
    """Exporta DataFrame para Excel e retorna bytes para download"""
    from io import BytesIO
    output = BytesIO()
    with pd.ExcelWriter(output, engine='openpyxl') as writer:
        df.to_excel(writer, index=True, sheet_name='Dados')
    output.seek(0)
    return output.getvalue()

# Bot√£o para download da tabela "Total SAP KE5Z - Todas as contas"
if st.button("üì• Baixar Total SAP KE5Z - Todas as contas (Excel)", use_container_width=True):
    with st.spinner("Gerando arquivo..."):
        # Criar a tabela pivot novamente para exporta√ß√£o (sem formata√ß√£o de estilo)
        tabela_para_exportar = df_filtrado.pivot_table(index='N¬∫ conta', columns='Per√≠odo', values='Valor', aggfunc='sum', fill_value=0, margins=True, margins_name='Total')
        excel_data = exportar_excel(tabela_para_exportar, 'KE5Z_total_contas.xlsx')
        
        # For√ßar download usando JavaScript
        import base64
        b64 = base64.b64encode(excel_data).decode()
        href = f'<a href="data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64,{b64}" download="KE5Z_total_contas.xlsx">üíæ Clique aqui para baixar</a>'
        st.markdown(href, unsafe_allow_html=True)
        st.success("‚úÖ Arquivo gerado! Clique no link acima para baixar.")

# Exibir o n√∫mero de linhas e colunas do DataFrame filtrado e a soma do valor total
st.sidebar.write(f"N√∫mero de linhas: {df_filtrado.shape[0]}")
st.sidebar.write(f"N√∫mero de colunas: {df_filtrado.shape[1]}")
st.sidebar.write(f"Soma do Valor total: R$ {df_filtrado['Valor'].sum():,.2f}")


