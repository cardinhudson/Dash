#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script para usar configura√ß√µes do VS Code e aplicar configura√ß√µes de rede
Integra com .vscode/settings.json para evitar problemas de VPN
"""

import json
import os
import subprocess
import sys
from pathlib import Path

def ler_config_vscode():
    """L√™ as configura√ß√µes do VS Code"""
    vscode_settings = Path('.vscode/settings.json')
    
    if not vscode_settings.exists():
        print("‚ùå Arquivo .vscode/settings.json n√£o encontrado!")
        return None
    
    try:
        with open(vscode_settings, 'r', encoding='utf-8') as f:
            config = json.load(f)
        print("‚úÖ Configura√ß√µes do VS Code carregadas com sucesso!")
        return config
    except Exception as e:
        print(f"‚ùå Erro ao ler configura√ß√µes: {e}")
        return None

def aplicar_config_rede():
    """Aplica configura√ß√µes de rede baseadas no VS Code"""
    print("\nüîß Aplicando configura√ß√µes de rede...")
    
    # Configura√ß√µes de rede otimizadas
    comandos_rede = [
        "netsh winsock reset",
        "netsh int ip reset",
        "ipconfig /flushdns",
        "ipconfig /release",
        "ipconfig /renew"
    ]
    
    for comando in comandos_rede:
        try:
            print(f"   Executando: {comando}")
            subprocess.run(comando, shell=True, capture_output=True, text=True)
        except Exception as e:
            print(f"   ‚ö†Ô∏è Erro em {comando}: {e}")
    
    print("‚úÖ Configura√ß√µes de rede aplicadas!")

def testar_python():
    """Testa se o Python est√° funcionando corretamente"""
    print("\nüêç Testando Python...")
    
    try:
        # Testa comando python
        result = subprocess.run(['python', '--version'], 
                              capture_output=True, text=True, timeout=10)
        if result.returncode == 0:
            print(f"‚úÖ Python funcionando: {result.stdout.strip()}")
            return True
    except Exception as e:
        print(f"‚ùå Erro com 'python': {e}")
    
    try:
        # Testa comando py
        result = subprocess.run(['py', '--version'], 
                              capture_output=True, text=True, timeout=10)
        if result.returncode == 0:
            print(f"‚úÖ Py funcionando: {result.stdout.strip()}")
            return True
    except Exception as e:
        print(f"‚ùå Erro com 'py': {e}")
    
    print("‚ùå Nenhum comando Python funcionando!")
    return False

def executar_extracao():
    """Executa o script de extra√ß√£o"""
    print("\nüìä Executando Extra√ß√£o.py...")
    
    try:
        # Tenta com python primeiro
        result = subprocess.run(['python', 'Extra√ß√£o.py'], 
                              capture_output=True, text=True, timeout=300)
        if result.returncode == 0:
            print("‚úÖ Extra√ß√£o.py executado com sucesso!")
            return True
    except Exception as e:
        print(f"‚ùå Erro com 'python Extra√ß√£o.py': {e}")
    
    try:
        # Tenta com py
        result = subprocess.run(['py', 'Extra√ß√£o.py'], 
                              capture_output=True, text=True, timeout=300)
        if result.returncode == 0:
            print("‚úÖ Extra√ß√£o.py executado com sucesso!")
            return True
    except Exception as e:
        print(f"‚ùå Erro com 'py Extra√ß√£o.py': {e}")
    
    print("‚ùå Falha ao executar Extra√ß√£o.py!")
    return False

def main():
    """Fun√ß√£o principal"""
    print("=" * 50)
    print("    USAR CONFIGURA√á√ÉO VS CODE")
    print("=" * 50)
    
    # 1. Ler configura√ß√µes do VS Code
    config = ler_config_vscode()
    if not config:
        return
    
    # 2. Aplicar configura√ß√µes de rede
    aplicar_config_rede()
    
    # 3. Testar Python
    if not testar_python():
        print("\n‚ùå Sistema n√£o configurado corretamente!")
        return
    
    # 4. Executar extra√ß√£o
    if executar_extracao():
        print("\nüéâ SISTEMA CONFIGURADO E FUNCIONANDO!")
    else:
        print("\n‚ö†Ô∏è Sistema configurado, mas extra√ß√£o falhou!")

if __name__ == "__main__":
    main()