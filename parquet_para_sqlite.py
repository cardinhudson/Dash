#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de Migra√ß√£o: Parquet ‚Üí SQLite
Converte KE5Z.parquet para banco SQLite otimizado para Streamlit Cloud
Mant√©m TODOS os dados originais exatos
"""

import pandas as pd
import sqlite3
import os
from datetime import datetime
import sys

def migrar_parquet_para_sqlite():
    """
    Migra dados do KE5Z.parquet para SQLite
    Mant√©m TODOS os dados exatos, mas com performance muito melhor
    """
    
    print("=" * 60)
    print("üöÄ MIGRA√á√ÉO PARQUET ‚Üí SQLite")
    print("=" * 60)
    
    # Caminhos dos arquivos
    arquivo_parquet = os.path.join("KE5Z", "KE5Z.parquet")
    arquivo_sqlite = "dados_ke5z.db"
    
    # Verificar se parquet existe
    if not os.path.exists(arquivo_parquet):
        print(f"‚ùå ERRO: Arquivo n√£o encontrado: {arquivo_parquet}")
        print("   Certifique-se de que o arquivo KE5Z.parquet est√° na pasta KE5Z/")
        return False
    
    try:
        # 1. CARREGAR DADOS DO PARQUET
        print(f"üìÇ Carregando dados de: {arquivo_parquet}")
        inicio = datetime.now()
        
        df = pd.read_parquet(arquivo_parquet)
        
        tempo_carregamento = (datetime.now() - inicio).total_seconds()
        print(f"‚úÖ Dados carregados em {tempo_carregamento:.1f}s")
        print(f"üìä Total de registros: {len(df):,}")
        print(f"üìã Colunas: {list(df.columns)}")
        
        # Mostrar informa√ß√µes dos dados
        print(f"üíæ Tamanho em mem√≥ria: {df.memory_usage(deep=True).sum() / (1024*1024):.1f} MB")
        
        # 2. PREPARAR DADOS PARA SQLite
        print("\nüîß Preparando dados para SQLite...")
        
        # Limpar dados problem√°ticos
        for col in df.columns:
            if df[col].dtype == 'object':
                # Substituir NaN por string vazia
                df[col] = df[col].fillna('')
                print(f"   üßπ {col}: NaN substitu√≠dos por string vazia")
        
        # 3. CRIAR BANCO SQLite
        print(f"\nüóÑÔ∏è  Criando banco SQLite: {arquivo_sqlite}")
        
        # Remover banco anterior se existir
        if os.path.exists(arquivo_sqlite):
            os.remove(arquivo_sqlite)
            print("   üóëÔ∏è  Banco anterior removido")
        
        # Conectar ao SQLite
        conn = sqlite3.connect(arquivo_sqlite)
        
        # 4. INSERIR DADOS NO SQLite
        print("üì• Inserindo dados no SQLite...")
        inicio_insert = datetime.now()
        
        # Inserir dados (todos os registros exatos)
        df.to_sql('ke5z_dados', conn, if_exists='replace', index=False, method='multi')
        
        tempo_insert = (datetime.now() - inicio_insert).total_seconds()
        print(f"‚úÖ Dados inseridos em {tempo_insert:.1f}s")
        
        # 5. CRIAR √çNDICES PARA PERFORMANCE
        print("‚ö° Criando √≠ndices para otimiza√ß√£o...")
        
        indices = [
            ('idx_periodo', 'Per√≠odo'),
            ('idx_usi', 'USI'),
            ('idx_type05', '"Type 05"'),
            ('idx_type06', '"Type 06"'),
            ('idx_valor', 'Valor'),
            ('idx_periodo_usi', 'Per√≠odo, USI')
        ]
        
        for nome_indice, colunas in indices:
            try:
                conn.execute(f'CREATE INDEX {nome_indice} ON ke5z_dados({colunas})')
                print(f"   üìç √çndice criado: {nome_indice}")
            except Exception as e:
                print(f"   ‚ö†Ô∏è  Erro ao criar √≠ndice {nome_indice}: {e}")
        
        # 6. VERIFICAR INTEGRIDADE
        print("\nüîç Verificando integridade dos dados...")
        
        # Contar registros
        cursor = conn.execute('SELECT COUNT(*) FROM ke5z_dados')
        total_sqlite = cursor.fetchone()[0]
        
        if total_sqlite == len(df):
            print(f"‚úÖ Integridade OK: {total_sqlite:,} registros")
        else:
            print(f"‚ùå ERRO: Parquet={len(df):,}, SQLite={total_sqlite:,}")
            return False
        
        # Verificar algumas estat√≠sticas
        cursor = conn.execute('SELECT SUM(Valor) FROM ke5z_dados')
        soma_sqlite = cursor.fetchone()[0]
        soma_pandas = df['Valor'].sum()
        
        if abs(soma_sqlite - soma_pandas) < 0.01:  # Toler√¢ncia para float
            print(f"‚úÖ Soma dos valores OK: R$ {soma_sqlite:,.2f}")
        else:
            print(f"‚ö†Ô∏è  Diferen√ßa nas somas: Pandas={soma_pandas:,.2f}, SQLite={soma_sqlite:,.2f}")
        
        # 7. INFORMA√á√ïES FINAIS
        conn.close()
        
        tamanho_sqlite = os.path.getsize(arquivo_sqlite) / (1024*1024)
        tamanho_parquet = os.path.getsize(arquivo_parquet) / (1024*1024)
        
        print("\n" + "=" * 60)
        print("üéâ MIGRA√á√ÉO CONCLU√çDA COM SUCESSO!")
        print("=" * 60)
        print(f"üìÅ Arquivo SQLite: {arquivo_sqlite}")
        print(f"üìä Registros migrados: {total_sqlite:,}")
        print(f"üíæ Tamanho Parquet: {tamanho_parquet:.1f} MB")
        print(f"üíæ Tamanho SQLite: {tamanho_sqlite:.1f} MB")
        print(f"üìà Diferen√ßa: {((tamanho_sqlite/tamanho_parquet-1)*100):+.1f}%")
        print(f"‚è±Ô∏è  Tempo total: {(datetime.now() - inicio).total_seconds():.1f}s")
        print("\n‚úÖ Agora voc√™ pode usar o SQLite no Streamlit Cloud!")
        print("‚úÖ Performance ser√° MUITO melhor que o Parquet!")
        
        return True
        
    except Exception as e:
        print(f"‚ùå ERRO durante a migra√ß√£o: {e}")
        import traceback
        traceback.print_exc()
        return False

def testar_sqlite():
    """Testa se o SQLite foi criado corretamente"""
    
    arquivo_sqlite = "dados_ke5z.db"
    
    if not os.path.exists(arquivo_sqlite):
        print("‚ùå Arquivo SQLite n√£o encontrado. Execute a migra√ß√£o primeiro.")
        return False
    
    try:
        print("\nüß™ TESTANDO SQLite...")
        conn = sqlite3.connect(arquivo_sqlite)
        
        # Teste 1: Contar registros
        cursor = conn.execute('SELECT COUNT(*) FROM ke5z_dados')
        total = cursor.fetchone()[0]
        print(f"‚úÖ Total de registros: {total:,}")
        
        # Teste 2: Primeiros registros
        df_teste = pd.read_sql_query('SELECT * FROM ke5z_dados LIMIT 5', conn)
        print(f"‚úÖ Primeiros 5 registros carregados")
        print(df_teste.head())
        
        # Teste 3: Agrega√ß√£o
        cursor = conn.execute('SELECT USI, COUNT(*) as qty FROM ke5z_dados GROUP BY USI LIMIT 5')
        print(f"\n‚úÖ Teste de agrega√ß√£o:")
        for row in cursor.fetchall():
            print(f"   {row[0]}: {row[1]:,} registros")
        
        conn.close()
        print("‚úÖ Todos os testes passaram!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no teste: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ Script de Migra√ß√£o KE5Z: Parquet ‚Üí SQLite")
    print("Desenvolvido para otimizar o Dashboard no Streamlit Cloud\n")
    
    # Executar migra√ß√£o
    sucesso = migrar_parquet_para_sqlite()
    
    if sucesso:
        # Testar SQLite
        testar_sqlite()
        
        print("\n" + "="*60)
        print("üéØ PR√ìXIMOS PASSOS:")
        print("="*60)
        print("1. ‚úÖ Migra√ß√£o conclu√≠da")
        print("2. üîÑ Dash.py ser√° atualizado automaticamente")
        print("3. üß™ Testes locais ser√£o executados")
        print("4. üöÄ Pronto para deploy no Streamlit Cloud")
        print("\nüí° O arquivo 'dados_ke5z.db' deve ser enviado junto com o projeto!")
        
    else:
        print("\n‚ùå Migra√ß√£o falhou. Verifique os erros acima.")
        sys.exit(1)
