#!/usr/bin/env python3
"""
Sistema de autentica√ß√£o simplificado para Streamlit Cloud
Usa secrets.toml ou vari√°veis de ambiente - sem arquivos JSON
"""
import streamlit as st
import hashlib
from datetime import datetime

def criar_hash_senha(senha):
    """Cria um hash SHA-256 da senha"""
    return hashlib.sha256(senha.encode()).hexdigest()

def get_usuarios_cloud():
    """Carrega usu√°rios do sistema de secrets do Streamlit Cloud OU usuarios.json local"""
    import json
    import os
    
    try:
        # PRIORIDADE 1: Tentar carregar do arquivo usuarios.json (local)
        if os.path.exists('usuarios.json'):
            with open('usuarios.json', 'r', encoding='utf-8') as f:
                usuarios_json = json.load(f)
                # Converter formato se necess√°rio (adicionar tipo se n√£o existir)
                for usuario, dados in usuarios_json.items():
                    if 'tipo' not in dados:
                        # Se n√£o tem tipo, admin √© administrador, outros s√£o usu√°rios
                        dados['tipo'] = 'administrador' if usuario == 'admin' else 'usuario'
                return usuarios_json
        
        # PRIORIDADE 2: Tentar carregar do secrets.toml (Streamlit Cloud)
        elif hasattr(st, 'secrets') and 'usuarios' in st.secrets:
            return dict(st.secrets.usuarios)
        
        # FALLBACK: usu√°rios hardcoded para desenvolvimento
        else:
            return {
                'admin': {
                    'senha': criar_hash_senha('admin123'),
                    'status': 'aprovado',
                    'tipo': 'administrador'
                },
                'demo': {
                    'senha': criar_hash_senha('demo123'),
                    'status': 'aprovado',
                    'tipo': 'usuario'
                }
            }
    except Exception as e:
        # Em caso de erro, retornar usu√°rios b√°sicos
        return {
            'admin': {
                'senha': criar_hash_senha('admin123'),
                'status': 'aprovado',
                'tipo': 'administrador'
            }
        }

def verificar_login_simples(usuario, senha):
    """Verifica se o login √© v√°lido"""
    usuarios = get_usuarios_cloud()
    
    if usuario in usuarios:
        senha_hash = criar_hash_senha(senha)
        if usuarios[usuario]['senha'] == senha_hash:
            if usuarios[usuario].get('status') == 'aprovado':
                return True
            else:
                st.error("‚è≥ Conta pendente de aprova√ß√£o.")
                return False
        else:
            st.error("‚ùå Senha incorreta!")
            return False
    else:
        st.error("‚ùå Usu√°rio n√£o encontrado!")
        return False

def eh_administrador_simples():
    """Verifica se o usu√°rio atual √© administrador"""
    if 'usuario_nome' not in st.session_state:
        return False
    
    usuarios = get_usuarios_cloud()
    usuario_atual = st.session_state.usuario_nome
    
    if usuario_atual in usuarios:
        return usuarios[usuario_atual].get('tipo') == 'administrador'
    
    return usuario_atual == 'admin'  # Fallback

def fazer_logout_simples():
    """Faz logout do usu√°rio"""
    keys_to_remove = ['usuario_nome', 'usuario_logado', 'login_time']
    for key in keys_to_remove:
        if key in st.session_state:
            del st.session_state[key]
    st.rerun()

def verificar_autenticacao_simples():
    """Verifica se o usu√°rio est√° autenticado - vers√£o simplificada"""
    
    # Verificar se j√° est√° logado
    if 'usuario_nome' in st.session_state:
        return True
    
    # Mostrar tela de login
    tela_login_simples()
    st.stop()

def exibir_header_usuario_simples():
    """Exibe o header com informa√ß√µes do usu√°rio"""
    if 'usuario_nome' in st.session_state:
        st.sidebar.markdown("---")
        st.sidebar.write(f"üë§ **Usu√°rio:** {st.session_state['usuario_nome']}")
        
        if eh_administrador_simples():
            st.sidebar.write("üëë **Administrador**")
        else:
            st.sidebar.write("üë• **Usu√°rio**")
        
        # Mostrar modo de opera√ß√£o atual
        modo_atual = st.session_state.get('modo_operacao', 'cloud')
        if modo_atual == 'cloud':
            st.sidebar.success("‚öôÔ∏è **Modo:** ‚òÅÔ∏è Cloud (Otimizado)")
        else:
            st.sidebar.info("‚öôÔ∏è **Modo:** üíª Completo")
        
        if st.sidebar.button("üö™ Logout", use_container_width=True):
            fazer_logout_simples()

def tela_login_simples():
    """Exibe a tela de login simplificada"""
    
    # Detectar ambiente
    try:
        base_url = st.get_option('server.baseUrlPath') or ''
        is_cloud = 'share.streamlit.io' in base_url
    except Exception:
        is_cloud = False
    
    st.title("üîê Login - Dashboard KE5Z")
    
    if is_cloud:
        st.info("‚òÅÔ∏è **Streamlit Cloud** - Sistema de autentica√ß√£o simplificado")
    else:
        st.info("üíª **Modo Local** - Sistema de autentica√ß√£o simplificado")
    
    st.markdown("---")
    
    # Formul√°rio de login
    with st.form("login_form_simple"):
        st.subheader("üìù Fazer Login")
        
        usuario = st.text_input("Usu√°rio:", placeholder="Digite seu usu√°rio")
        senha = st.text_input("Senha:", type="password", placeholder="Digite sua senha")
        
        st.markdown("---")
        st.subheader("‚öôÔ∏è Modo de Opera√ß√£o")
        
        # Verificar se usu√°rio ser√° admin para determinar op√ß√µes dispon√≠veis
        usuarios = get_usuarios_cloud()
        sera_admin = usuario in usuarios and usuarios[usuario].get('tipo') == 'administrador'
        
        if sera_admin:
            # Admin pode escolher qualquer modo
            modo_operacao = st.radio(
                "Escolha o modo para todas as p√°ginas:",
                options=["cloud", "completo"],
                format_func=lambda x: {
                    "cloud": "‚òÅÔ∏è Modo Cloud (Otimizado) - Recomendado",
                    "completo": "üíª Modo Completo (Todos os dados)"
                }[x],
                index=0,  # Padr√£o: modo cloud
                help="Modo Cloud: Usa apenas dados otimizados (sem Others) para melhor performance.\n"
                     "Modo Completo: Acesso a todos os dados incluindo 'Dados Completos'."
            )
        else:
            # Usu√°rios n√£o-admin s√£o FOR√áADOS ao modo cloud
            modo_operacao = "cloud"
            st.info("üîí **Modo Cloud (For√ßado)**\n"
                   "Usu√°rios n√£o-administradores usam automaticamente o modo otimizado.\n"
                   "‚Ä¢ Melhor performance e velocidade\n"
                   "‚Ä¢ Dados otimizados para an√°lises\n"
                   "‚Ä¢ Experi√™ncia otimizada")
        
        # Informa√ß√µes sobre cada modo
        if modo_operacao == "cloud":
            st.info("üéØ **Modo Cloud Selecionado**\n"
                   "‚Ä¢ Carrega apenas dados otimizados\n" 
                   "‚Ä¢ Melhor performance e velocidade\n"
                   "‚Ä¢ Ideal para an√°lises gerais\n"
                   "‚Ä¢ Oculta op√ß√£o 'Dados Completos'")
        else:
            st.warning("‚ö†Ô∏è **Modo Completo Selecionado**\n"
                      "‚Ä¢ Acesso a todos os conjuntos de dados\n"
                      "‚Ä¢ Pode ter impacto na performance\n"
                      "‚Ä¢ Recomendado apenas para uso local\n"
                      "‚Ä¢ Inclui op√ß√£o 'Dados Completos'")
        
        col1, col2 = st.columns(2)
        
        with col1:
            if st.form_submit_button("üîì Entrar", use_container_width=True):
                if usuario and senha:
                    if verificar_login_simples(usuario, senha):
                        st.session_state.usuario_nome = usuario
                        st.session_state.usuario_logado = True
                        st.session_state.login_time = datetime.now().isoformat()
                        # Salvar modo de opera√ß√£o selecionado
                        st.session_state.modo_operacao = modo_operacao
                        st.success(f"‚úÖ Login realizado! Bem-vindo, {usuario}!")
                        st.success(f"‚öôÔ∏è Modo selecionado: {'‚òÅÔ∏è Cloud (Otimizado)' if modo_operacao == 'cloud' else 'üíª Completo'}")
                        st.rerun()
                else:
                    st.error("‚ùå Preencha usu√°rio e senha!")
        
        with col2:
            if st.form_submit_button("üîÑ Limpar", use_container_width=True):
                st.rerun()
    
    # Informa√ß√µes de usu√°rios dispon√≠veis
    st.markdown("---")
    st.subheader("üë• Usu√°rios Dispon√≠veis")
    
    usuarios = get_usuarios_cloud()
    
    # Mostrar usu√°rios de exemplo (sem mostrar senhas)
    if is_cloud:
        st.info("‚òÅÔ∏è **No Streamlit Cloud:** Usu√°rios s√£o configurados via secrets")
    else:
        st.info("üíª **Usu√°rios de demonstra√ß√£o:**")
        
    for usuario, dados in usuarios.items():
        tipo_icon = "üëë" if dados.get('tipo') == 'administrador' else "üë•"
        tipo_text = "Administrador" if dados.get('tipo') == 'administrador' else "Usu√°rio"
        st.write(f"{tipo_icon} **{usuario}** - {tipo_text}")
    
    # Se√ß√£o de administra√ß√£o (apenas para admin)
    st.markdown("---")
    
    # Formul√°rio para adicionar usu√°rios (apenas se admin fizer login tempor√°rio)
    with st.expander("üëë Administra√ß√£o de Usu√°rios", expanded=False):
        st.subheader("‚ûï Adicionar Novo Usu√°rio")
        
        with st.form("adicionar_usuario_form"):
            col1, col2 = st.columns(2)
            
            with col1:
                novo_usuario = st.text_input("Nome do usu√°rio:", placeholder="Digite o nome do usu√°rio")
                nova_senha = st.text_input("Senha:", type="password", placeholder="Digite a senha")
            
            with col2:
                novo_tipo = st.selectbox("Tipo de usu√°rio:", ["usuario", "administrador"])
                st.caption("üëë Administrador: Acesso total\nüë• Usu√°rio: Acesso padr√£o")
            
            if st.form_submit_button("‚ûï Criar Usu√°rio", use_container_width=True):
                if novo_usuario and nova_senha:
                    sucesso, mensagem = salvar_usuario_json(novo_usuario, nova_senha, novo_tipo)
                    if sucesso:
                        st.success(mensagem)
                        st.info("üîÑ Fa√ßa login com o novo usu√°rio criado!")
                        st.rerun()
                    else:
                        st.error(mensagem)
                else:
                    st.error("‚ùå Preencha todos os campos!")
    
    # Link para p√°gina de administra√ß√£o dedicada
    st.markdown("---")
    st.info("üí° **Para administra√ß√£o completa de usu√°rios:**")
    col1, col2 = st.columns(2)
    with col1:
        if st.button("üëë Ir para P√°gina de Admin", use_container_width=True):
            st.markdown("üîó **Acesse:** [Administra√ß√£o de Usu√°rios](http://localhost:8640)")
            st.info("üìù Ou navegue pelo dashboard principal")
    with col2:
        if st.button("üìä Ir para Dashboard", use_container_width=True):
            st.markdown("üîó **Acesse:** [Dashboard Principal](http://localhost:8635)")
    
    # Instru√ß√µes
    with st.expander("üí° Como usar"):
        st.markdown("""
        ### üîê **Para Streamlit Cloud:**
        1. Configure secrets em: `Settings > Secrets`
        2. Adicione usu√°rios no formato:
        ```toml
        [usuarios.admin]
        senha = "hash_da_senha"
        status = "aprovado"
        tipo = "administrador"
        ```
        
        ### üíª **Para uso local:**
        - Use os usu√°rios existentes ou crie novos acima
        - Usu√°rios s√£o salvos em `usuarios.json`
        
        ### üîë **Senhas padr√£o (desenvolvimento):**
        - **admin**: admin123
        - **demo**: demo123
        """)

def adicionar_usuario_simples(nome_usuario, senha, tipo='usuario'):
    """Fun√ß√£o para adicionar usu√°rios (apenas para desenvolvimento local)"""
    if 'usuarios_temp' not in st.session_state:
        st.session_state.usuarios_temp = {}
    
    st.session_state.usuarios_temp[nome_usuario] = {
        'senha': criar_hash_senha(senha),
        'status': 'aprovado',
        'tipo': tipo,
        'criado_em': datetime.now().isoformat()
    }
    
    return True

def salvar_usuario_json(nome_usuario, senha, tipo='usuario'):
    """Salva usu√°rio no arquivo usuarios.json para persist√™ncia"""
    import json
    import os
    
    try:
        # Carregar usu√°rios existentes
        if os.path.exists('usuarios.json'):
            with open('usuarios.json', 'r', encoding='utf-8') as f:
                usuarios = json.load(f)
        else:
            usuarios = {}
        
        # Verificar se usu√°rio j√° existe
        if nome_usuario in usuarios:
            return False, "‚ùå Usu√°rio j√° existe!"
        
        # Validar dados
        if not nome_usuario or not senha:
            return False, "‚ùå Nome de usu√°rio e senha s√£o obrigat√≥rios!"
        
        if len(senha) < 4:
            return False, "‚ùå Senha deve ter pelo menos 4 caracteres!"
        
        # Adicionar novo usu√°rio
        usuarios[nome_usuario] = {
            'senha': criar_hash_senha(senha),
            'data_criacao': datetime.now().isoformat(),
            'status': 'aprovado',
            'tipo': tipo,
            'aprovado_em': datetime.now().isoformat()
        }
        
        # Salvar arquivo
        with open('usuarios.json', 'w', encoding='utf-8') as f:
            json.dump(usuarios, f, indent=2, ensure_ascii=False)
        
        return True, f"‚úÖ Usu√°rio '{nome_usuario}' criado com sucesso!"
        
    except Exception as e:
        return False, f"‚ùå Erro ao salvar usu√°rio: {str(e)}"

def listar_usuarios_json():
    """Lista todos os usu√°rios do arquivo usuarios.json"""
    import json
    import os
    
    try:
        if os.path.exists('usuarios.json'):
            with open('usuarios.json', 'r', encoding='utf-8') as f:
                usuarios = json.load(f)
            return usuarios
        return {}
    except Exception:
        return {}

# Fun√ß√µes de compatibilidade com o c√≥digo existente
def verificar_autenticacao():
    """Compatibilidade com c√≥digo existente"""
    return verificar_autenticacao_simples()

def exibir_header_usuario():
    """Compatibilidade com c√≥digo existente"""
    return exibir_header_usuario_simples()

def eh_administrador():
    """Compatibilidade com c√≥digo existente"""
    return eh_administrador_simples()

def verificar_status_aprovado(username):
    """Compatibilidade com c√≥digo existente"""
    usuarios = get_usuarios_cloud()
    if username in usuarios:
        return usuarios[username].get('status') == 'aprovado'
    return False

def get_modo_operacao():
    """Retorna o modo de opera√ß√£o selecionado no login"""
    return st.session_state.get('modo_operacao', 'cloud')

def is_modo_cloud():
    """Retorna True se o modo selecionado for cloud (otimizado)"""
    return get_modo_operacao() == 'cloud'

# Se este arquivo for executado diretamente, mostrar a tela de login
if __name__ == "__main__":
    # Configurar p√°gina
    st.set_page_config(
        page_title="Login - Dashboard KE5Z",
        page_icon="üîê",
        layout="centered"
    )
    
    # Mostrar tela de login
    tela_login_simples()
